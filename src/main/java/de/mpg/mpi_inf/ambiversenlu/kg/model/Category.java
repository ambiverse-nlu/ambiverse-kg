/*
 * Knowledge Graph Web Service
 * The Knowledge Graph Web Service lets you find entities and categories in the knowledge graph. This service is particularly suited to be run as a second step after the NLU Service has been used for linking ambiguous names in natural-language texts to entities. With this service, you can now explore these entities further.
 *
 * OpenAPI spec version: v2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.mpg.mpi_inf.ambiversenlu.kg.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.HashMap;
import java.util.Map;
import javax.validation.constraints.*;

/**
 * Category
 */
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaJerseyServerCodegen", date = "2019-10-24T12:54:00.720Z[GMT]")
public class Category   {
  @JsonProperty("id")
  private String id = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("descriptions")
  private Map<String, Label> descriptions = null;

  public Category id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Knowledge graph ID of the category.
   * @return id
   **/
  @JsonProperty("id")
  @Schema(example = "YAGO3:<wikicat_Billionaires>", required = true, description = "Knowledge graph ID of the category.")
  @NotNull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Category name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Human-readable name of the category.
   * @return name
   **/
  @JsonProperty("name")
  @Schema(example = "Billionaires", required = true, description = "Human-readable name of the category.")
  @NotNull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Category descriptions(Map<String, Label> descriptions) {
    this.descriptions = descriptions;
    return this;
  }

  public Category putDescriptionsItem(String key, Label descriptionsItem) {
    if (this.descriptions == null) {
      this.descriptions = new HashMap<String, Label>();
    }
    this.descriptions.put(key, descriptionsItem);
    return this;
  }

  /**
   * a (language, label) map. &#x60;en&#x60; is an example key.
   * @return descriptions
   **/
  @JsonProperty("descriptions")
  @Schema(description = "a (language, label) map. `en` is an example key.")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  public Map<String, Label> getDescriptions() {
    return descriptions;
  }

  public void setDescriptions(Map<String, Label> descriptions) {
    this.descriptions = descriptions;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Category category = (Category) o;
    return Objects.equals(this.id, category.id) &&
            Objects.equals(this.name, category.name) &&
            Objects.equals(this.descriptions, category.descriptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, descriptions);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Category {\n");

    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    descriptions: ").append(toIndentedString(descriptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
