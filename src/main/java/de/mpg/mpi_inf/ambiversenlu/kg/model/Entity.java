/*
 * Knowledge Graph Web Service
 * The Knowledge Graph Web Service lets you find entities and categories in the knowledge graph. This service is particularly suited to be run as a second step after the NLU Service has been used for linking ambiguous names in natural-language texts to entities. With this service, you can now explore these entities further.
 *
 * OpenAPI spec version: v2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.mpg.mpi_inf.ambiversenlu.kg.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.validation.constraints.*;

/**
 * Entity
 */
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaJerseyServerCodegen", date = "2019-10-24T12:54:00.720Z[GMT]")
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
public class Entity   {
  @JsonProperty("id")
  private String id = null;

  /**
   * The most high-level type of the entity.
   */
  public enum TypeEnum {
    UNKNOWN("UNKNOWN"),

    PERSON("PERSON"),

    LOCATION("LOCATION"),

    ORGANIZATION("ORGANIZATION"),

    EVENT("EVENT"),

    ARTIFACT("ARTIFACT"),

    OTHER("OTHER");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }
  @JsonProperty("type")
  @JsonInclude(JsonInclude.Include.NON_EMPTY)
  private TypeEnum type = null;

  @JsonProperty("names")
  @JsonInclude(JsonInclude.Include.NON_EMPTY)
  private Map<String, Label> names = new HashMap<String, Label>();

  @JsonProperty("descriptions")
  @JsonInclude(JsonInclude.Include.NON_EMPTY)
  private Map<String, Label> descriptions = new HashMap<String, Label>();

  @JsonProperty("detailedDescriptions")
  @JsonInclude(JsonInclude.Include.NON_EMPTY)
  private Map<String, Label> detailedDescriptions = null;

  @JsonProperty("image")
  @JsonInclude(JsonInclude.Include.NON_EMPTY)
  private Image image = null;

  @JsonProperty("links")
  @JsonInclude(JsonInclude.Include.NON_EMPTY)
  private Map<String, Label> links = new HashMap<String, Label>();

  @JsonProperty("geoLocation")
  @JsonInclude(JsonInclude.Include.NON_EMPTY)
  private GeoLocation geoLocation = null;

  @JsonProperty("categories")
  @JsonInclude(JsonInclude.Include.NON_EMPTY)
  private List<String> categories = null;

  public Entity id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Knowledge graph ID of the entity.
   * @return id
   **/
  @JsonProperty("id")
  @Schema(example = "http://www.wikidata.org/entity/Q1137062", required = true, description = "Knowledge graph ID of the entity.")
  @NotNull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Entity type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The most high-level type of the entity.
   * @return type
   **/
  @JsonProperty("type")
  @Schema(example = "PERSON", required = true, description = "The most high-level type of the entity.")
  @NotNull
  @JsonInclude(JsonInclude.Include.NON_EMPTY)
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public Entity names(Map<String, Label> names) {
    this.names = names;
    return this;
  }

  public Entity putNamesItem(String key, Label namesItem) {
    this.names.put(key, namesItem);
    return this;
  }

  /**
   * a (language, label) map. &#x60;en&#x60; is an example key.
   * @return names
   **/
  @JsonProperty("names")
  @Schema(required = true, description = "a (language, label) map. `en` is an example key.")
  @NotNull
  @JsonInclude(JsonInclude.Include.NON_EMPTY)
  public Map<String, Label> getNames() {
    return names;
  }

  public void setNames(Map<String, Label> names) {
    this.names = names;
  }

  public Entity descriptions(Map<String, Label> descriptions) {
    this.descriptions = descriptions;
    return this;
  }

  public Entity putDescriptionsItem(String key, Label descriptionsItem) {
    this.descriptions.put(key, descriptionsItem);
    return this;
  }

  /**
   * a (language, label) map. &#x60;en&#x60; is an example key.
   * @return descriptions
   **/
  @JsonProperty("descriptions")
  @Schema(required = true, description = "a (language, label) map. `en` is an example key.")
  @NotNull
  @JsonInclude(JsonInclude.Include.NON_EMPTY)
  public Map<String, Label> getDescriptions() {
    return descriptions;
  }

  public void setDescriptions(Map<String, Label> descriptions) {
    this.descriptions = descriptions;
  }

  public Entity detailedDescriptions(Map<String, Label> detailedDescriptions) {
    this.detailedDescriptions = detailedDescriptions;
    return this;
  }

  public Entity putDetailedDescriptionsItem(String key, Label detailedDescriptionsItem) {
    if (this.detailedDescriptions == null) {
      this.detailedDescriptions = new HashMap<String, Label>();
    }
    this.detailedDescriptions.put(key, detailedDescriptionsItem);
    return this;
  }

  /**
   * a (language, label) map. &#x60;en&#x60; is an example key.
   * @return detailedDescriptions
   **/
  @JsonProperty("detailedDescriptions")
  @Schema(description = "a (language, label) map. `en` is an example key.")
  @JsonInclude(JsonInclude.Include.NON_EMPTY)
  public Map<String, Label> getDetailedDescriptions() {
    return detailedDescriptions;
  }

  public void setDetailedDescriptions(Map<String, Label> detailedDescriptions) {
    this.detailedDescriptions = detailedDescriptions;
  }

  public Entity image(Image image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   **/
  @JsonProperty("image")
  @Schema(description = "")
  @JsonInclude(JsonInclude.Include.NON_EMPTY)
  public Image getImage() {
    return image;
  }

  public void setImage(Image image) {
    this.image = image;
  }

  public Entity links(Map<String, Label> links) {
    this.links = links;
    return this;
  }

  public Entity putLinksItem(String key, Label linksItem) {
    this.links.put(key, linksItem);
    return this;
  }

  /**
   * a (language, label) map. &#x60;en&#x60; is an example key and value is an external links to different sources
   * @return links
   **/
  @JsonProperty("links")
  @Schema(required = true, description = "a (language, label) map. `en` is an example key and value is an external links to different sources")
  @NotNull
  @JsonInclude(JsonInclude.Include.NON_EMPTY)
  public Map<String, Label> getLinks() {
    return links;
  }

  public void setLinks(Map<String, Label> links) {
    this.links = links;
  }

  public Entity geoLocation(GeoLocation geoLocation) {
    this.geoLocation = geoLocation;
    return this;
  }

  /**
   * Get geoLocation
   * @return geoLocation
   **/
  @JsonProperty("geoLocation")
  @Schema(description = "")
  @JsonInclude(JsonInclude.Include.NON_EMPTY)
  public GeoLocation getGeoLocation() {
    return geoLocation;
  }

  public void setGeoLocation(GeoLocation geoLocation) {
    this.geoLocation = geoLocation;
  }

  public Entity categories(List<String> categories) {
    this.categories = categories;
    return this;
  }

  public Entity addCategoriesItem(String categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<String>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

  /**
   * List of categories, whereby each category is referenced by its knowledge graph ID.
   * @return categories
   **/
  @JsonProperty("categories")
  @Schema(description = "List of categories, whereby each category is referenced by its knowledge graph ID.")
  @JsonInclude(JsonInclude.Include.NON_EMPTY)
  public List<String> getCategories() {
    return categories;
  }

  public void setCategories(List<String> categories) {
    this.categories = categories;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Entity entity = (Entity) o;
    return Objects.equals(this.id, entity.id) &&
            Objects.equals(this.type, entity.type) &&
            Objects.equals(this.names, entity.names) &&
            Objects.equals(this.descriptions, entity.descriptions) &&
            Objects.equals(this.detailedDescriptions, entity.detailedDescriptions) &&
            Objects.equals(this.image, entity.image) &&
            Objects.equals(this.links, entity.links) &&
            Objects.equals(this.geoLocation, entity.geoLocation) &&
            Objects.equals(this.categories, entity.categories);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, names, descriptions, detailedDescriptions, image, links, geoLocation, categories);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Entity {\n");

    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    names: ").append(toIndentedString(names)).append("\n");
    sb.append("    descriptions: ").append(toIndentedString(descriptions)).append("\n");
    sb.append("    detailedDescriptions: ").append(toIndentedString(detailedDescriptions)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    geoLocation: ").append(toIndentedString(geoLocation)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
